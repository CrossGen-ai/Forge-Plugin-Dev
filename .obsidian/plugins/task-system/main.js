/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TaskSystemPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/settings/settings.interface.ts
var DEFAULT_CUSTOM_SCHEMA_FIELDS = [
  {
    id: "priority",
    displayName: "Priority",
    key: "priority",
    type: "enum",
    required: false,
    defaultValue: "medium",
    enumValues: ["low", "medium", "high"],
    description: "Task priority level"
  },
  {
    id: "due_date",
    displayName: "Due Date",
    key: "due_date",
    type: "date",
    required: false,
    description: "When the task is due"
  },
  {
    id: "tags",
    displayName: "Tags",
    key: "tags",
    type: "list",
    required: false,
    defaultValue: [],
    description: "Task tags for categorization"
  },
  {
    id: "dependencies",
    displayName: "Dependencies",
    key: "dependencies",
    type: "list",
    required: false,
    defaultValue: [],
    description: "Links to dependent tasks or notes"
  },
  {
    id: "completed_date",
    displayName: "Completed Date",
    key: "completed_date",
    type: "date",
    required: false,
    description: "When the task was completed"
  }
];
var DEFAULT_STATUS_CONFIGS = [
  {
    id: "status-1",
    value: "todo",
    label: "To Do",
    color: "#ff6b6b",
    isCompleted: false,
    order: 1
  },
  {
    id: "status-2",
    value: "in_progress",
    label: "In Progress",
    color: "#4ecdc4",
    isCompleted: false,
    order: 2
  },
  {
    id: "status-3",
    value: "blocked",
    label: "Blocked",
    color: "#ffe66d",
    isCompleted: false,
    order: 3
  },
  {
    id: "status-4",
    value: "done",
    label: "Done",
    color: "#95e1d3",
    isCompleted: true,
    order: 4
  }
];
var DEFAULT_SETTINGS = {
  enableValidation: true,
  autoPopulateDefaults: true,
  validationMode: "warn",
  statusConfigs: DEFAULT_STATUS_CONFIGS,
  defaultStatus: "todo",
  defaultPriority: "medium",
  dateFormat: "YYYY-MM-DD",
  showSuccessNotifications: false,
  validationDelay: 500,
  customSchemaFields: DEFAULT_CUSTOM_SCHEMA_FIELDS
};

// src/settings/settings.tab.ts
var import_obsidian2 = require("obsidian");

// src/schema/schema.definition.ts
var CORE_REQUIRED_FIELDS = ["atomic-task", "title", "created_date", "status", "ai_task"];
var VALID_PRIORITY_VALUES = ["low", "medium", "high"];
function getValidStatusValues(statusConfigs) {
  return statusConfigs.map((config) => config.value);
}
function getCoreSchemaFields(statusConfigs) {
  var _a;
  return [
    {
      name: "atomic-task",
      type: "boolean",
      required: true,
      displayName: "Atomic Task",
      description: "Marks this note as an atomic task"
    },
    {
      name: "title",
      type: "string",
      required: true,
      displayName: "Title",
      description: "Task title"
    },
    {
      name: "created_date",
      type: "date",
      required: true,
      displayName: "Created Date",
      description: "When the task was created"
    },
    {
      name: "status",
      type: "enum",
      required: true,
      enumValues: getValidStatusValues(statusConfigs),
      defaultValue: ((_a = statusConfigs[0]) == null ? void 0 : _a.value) || "todo",
      displayName: "Status",
      description: "Current task status"
    },
    {
      name: "ai_task",
      type: "boolean",
      required: true,
      defaultValue: false,
      displayName: "AI Task",
      description: "Marks this task as AI-generated or AI-assisted"
    }
  ];
}
function getCombinedSchemaFields(statusConfigs, customFields) {
  const combinedFields = [...getCoreSchemaFields(statusConfigs)];
  customFields.forEach((customField) => {
    combinedFields.push({
      name: customField.key,
      type: customField.type,
      // Type mapping handled in validator
      required: customField.required,
      defaultValue: customField.defaultValue,
      enumValues: customField.enumValues,
      displayName: customField.displayName,
      description: customField.description
    });
  });
  return combinedFields;
}
function getRequiredFields(customFields) {
  const requiredFields = [...CORE_REQUIRED_FIELDS];
  customFields.forEach((field) => {
    if (field.required) {
      requiredFields.push(field.key);
    }
  });
  return requiredFields;
}

// src/settings/components/ListEditorComponent.ts
var import_obsidian = require("obsidian");
var ListEditorComponent = class {
  constructor(config) {
    this.config = config;
    this.container = config.container;
    this.render();
  }
  render() {
    this.container.empty();
    this.createListHeaders();
    this.listContainer = this.container.createDiv(`settings-view__list-container ${this.config.className || ""}`.trim());
    this.renderItems();
    this.renderAddButton();
  }
  createListHeaders() {
    if (this.config.headers.length === 0)
      return;
    const headerRow = this.container.createDiv(`settings-view__header-row ${this.config.className || ""}`.trim());
    if (this.config.dragEnabled !== false) {
      headerRow.createDiv("settings-view__header-cell settings-view__drag-header");
    }
    this.config.headers.forEach((header) => {
      headerRow.createDiv("settings-view__header-cell").textContent = header;
    });
  }
  renderItems() {
    this.listContainer.empty();
    this.config.items.forEach((item, index) => {
      this.renderItemRow(item, index);
    });
  }
  renderItemRow(item, index) {
    const itemRow = this.listContainer.createDiv("settings-view__item-row");
    itemRow.setAttribute("data-item-id", item.id);
    if (this.config.dragEnabled !== false) {
      const dragHandle = itemRow.createDiv("settings-drag-handle");
      dragHandle.textContent = "\u2630";
      (0, import_obsidian.setTooltip)(dragHandle, "Drag to reorder", { placement: "top" });
      itemRow.setAttribute("draggable", "true");
      this.setupDragAndDrop(itemRow, item);
    }
    const updateItem = (updates) => {
      const updatedItems = [...this.config.items];
      updatedItems[index] = { ...updatedItems[index], ...updates };
      this.config.onItemsChange(updatedItems);
      this.renderItems();
    };
    const deleteItem = () => {
      if (this.config.canDelete && !this.config.canDelete(item))
        return;
      if (this.config.minItems && this.config.items.length <= this.config.minItems)
        return;
      const updatedItems = this.config.items.filter((i) => i.id !== item.id);
      this.config.onItemsChange(updatedItems);
      this.renderItems();
    };
    this.config.renderItem(itemRow, item, index, updateItem, deleteItem);
  }
  renderAddButton() {
    if (this.config.maxItems && this.config.items.length >= this.config.maxItems) {
      return;
    }
    const addButtonContainer = this.container.createDiv("settings-view__add-button-container");
    const addButton = addButtonContainer.createEl("button", {
      text: this.config.addButtonText || "Add Item",
      cls: "mod-cta"
    });
    addButton.addEventListener("click", () => {
      const newItem = this.config.createNewItem();
      const updatedItems = [...this.config.items, newItem];
      this.config.onItemsChange(updatedItems);
      this.renderItems();
      this.renderAddButton();
    });
  }
  setupDragAndDrop(itemRow, item) {
    itemRow.addEventListener("dragstart", (e) => {
      if (e.dataTransfer) {
        e.dataTransfer.setData("text/plain", item.id);
        itemRow.classList.add("dragging");
      }
    });
    itemRow.addEventListener("dragend", () => {
      itemRow.classList.remove("dragging");
    });
    itemRow.addEventListener("dragover", (e) => {
      e.preventDefault();
      const draggingRow = this.listContainer.querySelector(".dragging");
      if (draggingRow && draggingRow !== itemRow) {
        const rect = itemRow.getBoundingClientRect();
        const midpoint = rect.top + rect.height / 2;
        if (e.clientY < midpoint) {
          itemRow.classList.add("drag-over-top");
          itemRow.classList.remove("drag-over-bottom");
        } else {
          itemRow.classList.add("drag-over-bottom");
          itemRow.classList.remove("drag-over-top");
        }
      }
    });
    itemRow.addEventListener("dragleave", () => {
      itemRow.classList.remove("drag-over-top", "drag-over-bottom");
    });
    itemRow.addEventListener("drop", (e) => {
      var _a;
      e.preventDefault();
      const draggedId = (_a = e.dataTransfer) == null ? void 0 : _a.getData("text/plain");
      if (!draggedId || draggedId === item.id)
        return;
      itemRow.classList.remove("drag-over-top", "drag-over-bottom");
      const draggedIndex = this.config.items.findIndex((i) => i.id === draggedId);
      const targetIndex = this.config.items.findIndex((i) => i.id === item.id);
      if (draggedIndex === -1 || targetIndex === -1)
        return;
      const rect = itemRow.getBoundingClientRect();
      const midpoint = rect.top + rect.height / 2;
      const insertBefore = e.clientY < midpoint;
      const reorderedItems = [...this.config.items];
      const [draggedItem] = reorderedItems.splice(draggedIndex, 1);
      let insertIndex = targetIndex;
      if (draggedIndex < targetIndex && !insertBefore) {
        insertIndex = targetIndex;
      } else if (draggedIndex < targetIndex && insertBefore) {
        insertIndex = targetIndex - 1;
      } else if (draggedIndex > targetIndex && insertBefore) {
        insertIndex = targetIndex;
      } else if (draggedIndex > targetIndex && !insertBefore) {
        insertIndex = targetIndex + 1;
      }
      reorderedItems.splice(insertIndex, 0, draggedItem);
      reorderedItems.forEach((item2, index) => {
        item2.order = index + 1;
      });
      this.config.onItemsChange(reorderedItems);
      this.renderItems();
    });
  }
  updateItems(items) {
    this.config.items = items;
    this.renderItems();
  }
};

// src/settings/settings.tab.ts
var TaskSystemSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Atomic Task Schema Enforcer Settings" });
    new import_obsidian2.Setting(containerEl).setName("Enable schema validation").setDesc("Validate frontmatter schema for atomic task notes").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableValidation).onChange(async (value) => {
        this.plugin.settings.enableValidation = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Auto-populate missing fields").setDesc("Automatically fill in required fields with default values when missing").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoPopulateDefaults).onChange(async (value) => {
        this.plugin.settings.autoPopulateDefaults = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Validation mode").setDesc("How strict validation should be").addDropdown(
      (dropdown) => dropdown.addOptions({
        "warn": "Show warnings only",
        "strict": "Strict validation (future use)"
      }).setValue(this.plugin.settings.validationMode).onChange(async (value) => {
        this.plugin.settings.validationMode = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "Task Status Configuration" });
    const statusContainer = containerEl.createDiv("status-configuration-container");
    this.renderStatusConfiguration(statusContainer);
    containerEl.createEl("h3", { text: "Default Values" });
    new import_obsidian2.Setting(containerEl).setName("Default task status").setDesc("Default status for new atomic tasks").addDropdown((dropdown) => {
      const options = {};
      const statusValues = getValidStatusValues(this.plugin.settings.statusConfigs);
      statusValues.forEach((status) => {
        const config = this.plugin.settings.statusConfigs.find((c) => c.value === status);
        options[status] = (config == null ? void 0 : config.label) || status;
      });
      return dropdown.addOptions(options).setValue(this.plugin.settings.defaultStatus).onChange(async (value) => {
        this.plugin.settings.defaultStatus = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Default task priority").setDesc("Default priority for new atomic tasks").addDropdown((dropdown) => {
      const options = {};
      VALID_PRIORITY_VALUES.forEach((priority) => {
        options[priority] = priority.charAt(0).toUpperCase() + priority.slice(1);
      });
      return dropdown.addOptions(options).setValue(this.plugin.settings.defaultPriority).onChange(async (value) => {
        this.plugin.settings.defaultPriority = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Date format").setDesc("Format for date fields (currently only YYYY-MM-DD supported)").addText(
      (text) => text.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).setDisabled(true)
      // Disabled for now as only one format is supported
    );
    containerEl.createEl("h3", { text: "Notifications" });
    new import_obsidian2.Setting(containerEl).setName("Show success notifications").setDesc("Show notifications when validation passes without issues").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showSuccessNotifications).onChange(async (value) => {
        this.plugin.settings.showSuccessNotifications = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "Performance" });
    new import_obsidian2.Setting(containerEl).setName("Validation delay (ms)").setDesc("Delay before validating files after changes (prevents excessive validation)").addSlider(
      (slider) => slider.setLimits(100, 2e3, 100).setValue(this.plugin.settings.validationDelay).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.validationDelay = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "Schema Configuration" });
    const coreInfo = containerEl.createDiv("core-fields-info");
    coreInfo.createEl("p", { text: "Core required fields (cannot be modified):" });
    const coreList = coreInfo.createEl("ul");
    const coreFields = getCoreSchemaFields(this.plugin.settings.statusConfigs);
    coreFields.forEach((field) => {
      const label = `${field.displayName || field.name} (${field.type}${field.required ? ", required" : ""})`;
      coreList.createEl("li", { text: label });
    });
    containerEl.createEl("h4", { text: "Custom Schema Fields" });
    const customFieldsContainer = containerEl.createDiv("custom-fields-container");
    this.renderCustomFields(customFieldsContainer);
    new import_obsidian2.Setting(containerEl).setName("Add new schema field").setDesc("Create a new custom field for atomic tasks").addButton(
      (button) => button.setButtonText("Add field").onClick(() => {
        new CustomFieldModal(this.app, this.plugin, (field) => {
          this.plugin.settings.customSchemaFields.push(field);
          this.plugin.saveSettings();
          this.renderCustomFields(customFieldsContainer);
        }).open();
      })
    );
  }
  renderStatusConfiguration(container) {
    new ListEditorComponent({
      container,
      items: this.plugin.settings.statusConfigs,
      headers: ["Status Value", "Display Label", "Color", "Completed", "Actions"],
      className: "status-config",
      onItemsChange: async (items) => {
        this.plugin.settings.statusConfigs = items;
        await this.plugin.saveSettings();
        this.display();
      },
      renderItem: (itemContainer, item, index, updateItem, deleteItem) => {
        const valueCell = itemContainer.createDiv("settings-view__cell");
        const valueInput = valueCell.createEl("input", {
          type: "text",
          value: item.value,
          placeholder: "e.g., in_progress"
        });
        valueInput.addEventListener("input", () => {
          updateItem({ value: valueInput.value.toLowerCase().replace(/[^a-z0-9_]/g, "") });
        });
        const labelCell = itemContainer.createDiv("settings-view__cell");
        const labelInput = labelCell.createEl("input", {
          type: "text",
          value: item.label,
          placeholder: "e.g., In Progress"
        });
        labelInput.addEventListener("input", () => {
          updateItem({ label: labelInput.value });
        });
        const colorCell = itemContainer.createDiv("settings-view__cell");
        const colorInput = colorCell.createEl("input", {
          type: "color",
          value: item.color
        });
        colorInput.addEventListener("input", () => {
          updateItem({ color: colorInput.value });
        });
        const completedCell = itemContainer.createDiv("settings-view__cell");
        const completedInput = completedCell.createEl("input", {
          type: "checkbox"
        });
        completedInput.checked = item.isCompleted;
        completedInput.addEventListener("change", () => {
          updateItem({ isCompleted: completedInput.checked });
        });
        const actionsCell = itemContainer.createDiv("settings-view__cell");
        const deleteButton = actionsCell.createEl("button", {
          text: "\xD7",
          cls: "clickable-icon",
          attr: { "aria-label": "Delete status" }
        });
        deleteButton.addEventListener("click", deleteItem);
      },
      canDelete: (item) => this.plugin.settings.statusConfigs.length > 2,
      // Minimum 2 statuses
      minItems: 2,
      dragEnabled: true,
      addButtonText: "Add Status",
      createNewItem: () => {
        const existingOrders = this.plugin.settings.statusConfigs.map((s) => s.order);
        const maxOrder = existingOrders.length > 0 ? Math.max(...existingOrders) : 0;
        return {
          id: `status-${Date.now()}`,
          value: "new_status",
          label: "New Status",
          color: "#808080",
          isCompleted: false,
          order: maxOrder + 1
        };
      }
    });
  }
  renderCustomFields(container) {
    container.empty();
    if (this.plugin.settings.customSchemaFields.length === 0) {
      container.createEl("p", {
        text: 'No custom fields configured. Click "Add field" to create your first custom schema field.',
        cls: "setting-item-description"
      });
      return;
    }
    this.plugin.settings.customSchemaFields.forEach((field, index) => {
      const fieldContainer = container.createDiv("custom-field-item");
      const fieldHeader = fieldContainer.createDiv("custom-field-header");
      fieldHeader.createEl("strong", { text: field.displayName || field.key });
      fieldHeader.createEl("span", {
        text: ` (${field.key}: ${field.type}${field.required ? ", required" : ""})`,
        cls: "custom-field-meta"
      });
      if (field.description) {
        fieldContainer.createEl("p", {
          text: field.description,
          cls: "custom-field-description"
        });
      }
      const fieldActions = fieldContainer.createDiv("custom-field-actions");
      fieldActions.createEl("button", { text: "Edit" }).addEventListener("click", () => {
        new CustomFieldModal(this.app, this.plugin, (editedField) => {
          this.plugin.settings.customSchemaFields[index] = editedField;
          this.plugin.saveSettings();
          this.renderCustomFields(container);
        }, field).open();
      });
      fieldActions.createEl("button", { text: "Delete", cls: "mod-warning" }).addEventListener("click", () => {
        if (confirm(`Are you sure you want to delete the field "${field.displayName || field.key}"?`)) {
          this.plugin.settings.customSchemaFields.splice(index, 1);
          this.plugin.saveSettings();
          this.renderCustomFields(container);
        }
      });
    });
  }
};
var CustomFieldModal = class extends import_obsidian2.Modal {
  constructor(app, plugin, onSave, existingField) {
    super(app);
    this.plugin = plugin;
    this.onSave = onSave;
    this.field = existingField ? { ...existingField } : {
      id: `field_${Date.now()}`,
      displayName: "",
      key: "",
      type: "text",
      required: false
    };
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: this.field.id.startsWith("field_") ? "Add Custom Field" : "Edit Custom Field" });
    new import_obsidian2.Setting(contentEl).setName("Display Name").setDesc("Human-readable name shown in UI").addText(
      (text) => text.setPlaceholder("e.g., Project Phase").setValue(this.field.displayName).onChange((value) => {
        this.field.displayName = value;
        if (!this.field.key || this.field.key === this.field.displayName.toLowerCase().replace(/\s+/g, "_")) {
          this.field.key = value.toLowerCase().replace(/\s+/g, "_").replace(/[^a-z0-9_]/g, "");
          keyInput.setValue(this.field.key);
        }
      })
    );
    let keyInput;
    new import_obsidian2.Setting(contentEl).setName("Frontmatter Key").setDesc("The key used in frontmatter (lowercase, underscores allowed)").addText((text) => {
      keyInput = text;
      return text.setPlaceholder("e.g., project_phase").setValue(this.field.key).onChange((value) => {
        this.field.key = value.toLowerCase().replace(/[^a-z0-9_]/g, "");
        text.setValue(this.field.key);
      });
    });
    new import_obsidian2.Setting(contentEl).setName("Field Type").setDesc("Data type for this field").addDropdown(
      (dropdown) => dropdown.addOptions({
        "text": "Text",
        "number": "Number",
        "date": "Date",
        "boolean": "Boolean",
        "list": "List",
        "enum": "Enum (predefined values)"
      }).setValue(this.field.type).onChange((value) => {
        this.field.type = value;
        this.updateEnumValuesVisibility();
      })
    );
    new import_obsidian2.Setting(contentEl).setName("Required").setDesc("Whether this field is required for all atomic tasks").addToggle(
      (toggle) => toggle.setValue(this.field.required).onChange((value) => {
        this.field.required = value;
      })
    );
    new import_obsidian2.Setting(contentEl).setName("Default Value").setDesc("Default value when auto-populating (optional)").addText(
      (text) => text.setPlaceholder("Leave empty for no default").setValue(this.field.defaultValue || "").onChange((value) => {
        this.field.defaultValue = value || void 0;
      })
    );
    const enumContainer = contentEl.createDiv("enum-values-container");
    this.updateEnumValuesVisibility();
    new import_obsidian2.Setting(contentEl).setName("Description").setDesc("Optional description of this field").addTextArea(
      (text) => text.setPlaceholder("e.g., The current phase of the project").setValue(this.field.description || "").onChange((value) => {
        this.field.description = value || void 0;
      })
    );
    const buttonContainer = contentEl.createDiv("modal-button-container");
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "10px";
    buttonContainer.style.marginTop = "20px";
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.addEventListener("click", () => this.close());
    const saveButton = buttonContainer.createEl("button", { text: "Save", cls: "mod-cta" });
    saveButton.addEventListener("click", () => {
      if (this.validateField()) {
        this.onSave(this.field);
        this.close();
      }
    });
  }
  updateEnumValuesVisibility() {
    const enumContainer = this.contentEl.querySelector(".enum-values-container");
    if (!enumContainer)
      return;
    enumContainer.empty();
    if (this.field.type === "enum") {
      enumContainer.createEl("h4", { text: "Enum Values" });
      enumContainer.createEl("p", {
        text: "Enter the allowed values for this enum field (one per line):",
        cls: "setting-item-description"
      });
      const textarea = enumContainer.createEl("textarea", {
        placeholder: "e.g.:\nplanning\nin-progress\ncompleted\nstalled"
      });
      textarea.style.width = "100%";
      textarea.style.minHeight = "100px";
      textarea.value = (this.field.enumValues || []).join("\n");
      textarea.addEventListener("input", () => {
        const values = textarea.value.split("\n").map((v) => v.trim()).filter((v) => v.length > 0);
        this.field.enumValues = values.length > 0 ? values : void 0;
      });
    }
  }
  validateField() {
    if (!this.field.displayName.trim()) {
      alert("Display Name is required");
      return false;
    }
    if (!this.field.key.trim()) {
      alert("Frontmatter Key is required");
      return false;
    }
    const existingField = this.plugin.settings.customSchemaFields.find(
      (f) => f.key === this.field.key && f.id !== this.field.id
    );
    if (existingField) {
      alert(`A field with key "${this.field.key}" already exists`);
      return false;
    }
    const coreFields = getCoreSchemaFields(this.plugin.settings.statusConfigs);
    const coreKeys = coreFields.map((f) => f.name);
    if (coreKeys.includes(this.field.key)) {
      alert(`The key "${this.field.key}" is reserved for core fields`);
      return false;
    }
    if (this.field.type === "enum" && (!this.field.enumValues || this.field.enumValues.length === 0)) {
      alert("Enum fields must have at least one allowed value");
      return false;
    }
    return true;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// node_modules/js-yaml/dist/js-yaml.mjs
function isNothing(subject) {
  return typeof subject === "undefined" || subject === null;
}
function isObject(subject) {
  return typeof subject === "object" && subject !== null;
}
function toArray(sequence) {
  if (Array.isArray(sequence))
    return sequence;
  else if (isNothing(sequence))
    return [];
  return [sequence];
}
function extend(target, source) {
  var index, length, key, sourceKeys;
  if (source) {
    sourceKeys = Object.keys(source);
    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }
  return target;
}
function repeat(string, count) {
  var result = "", cycle;
  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }
  return result;
}
function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}
var isNothing_1 = isNothing;
var isObject_1 = isObject;
var toArray_1 = toArray;
var repeat_1 = repeat;
var isNegativeZero_1 = isNegativeZero;
var extend_1 = extend;
var common = {
  isNothing: isNothing_1,
  isObject: isObject_1,
  toArray: toArray_1,
  repeat: repeat_1,
  isNegativeZero: isNegativeZero_1,
  extend: extend_1
};
function formatError(exception2, compact) {
  var where = "", message = exception2.reason || "(unknown reason)";
  if (!exception2.mark)
    return message;
  if (exception2.mark.name) {
    where += 'in "' + exception2.mark.name + '" ';
  }
  where += "(" + (exception2.mark.line + 1) + ":" + (exception2.mark.column + 1) + ")";
  if (!compact && exception2.mark.snippet) {
    where += "\n\n" + exception2.mark.snippet;
  }
  return message + " " + where;
}
function YAMLException$1(reason, mark) {
  Error.call(this);
  this.name = "YAMLException";
  this.reason = reason;
  this.mark = mark;
  this.message = formatError(this, false);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack || "";
  }
}
YAMLException$1.prototype = Object.create(Error.prototype);
YAMLException$1.prototype.constructor = YAMLException$1;
YAMLException$1.prototype.toString = function toString(compact) {
  return this.name + ": " + formatError(this, compact);
};
var exception = YAMLException$1;
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = "";
  var tail = "";
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
  if (position - lineStart > maxHalfLength) {
    head = " ... ";
    lineStart = position - maxHalfLength + head.length;
  }
  if (lineEnd - position > maxHalfLength) {
    tail = " ...";
    lineEnd = position + maxHalfLength - tail.length;
  }
  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
    pos: position - lineStart + head.length
    // relative position
  };
}
function padStart(string, max) {
  return common.repeat(" ", max - string.length) + string;
}
function makeSnippet(mark, options) {
  options = Object.create(options || null);
  if (!mark.buffer)
    return null;
  if (!options.maxLength)
    options.maxLength = 79;
  if (typeof options.indent !== "number")
    options.indent = 1;
  if (typeof options.linesBefore !== "number")
    options.linesBefore = 3;
  if (typeof options.linesAfter !== "number")
    options.linesAfter = 2;
  var re = /\r?\n|\r|\0/g;
  var lineStarts = [0];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;
  while (match = re.exec(mark.buffer)) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);
    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }
  if (foundLineNo < 0)
    foundLineNo = lineStarts.length - 1;
  var result = "", i, line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0)
      break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo - i],
      lineEnds[foundLineNo - i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
      maxLineLength
    );
    result = common.repeat(" ", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
  }
  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length)
      break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo + i],
      lineEnds[foundLineNo + i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
      maxLineLength
    );
    result += common.repeat(" ", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  }
  return result.replace(/\n$/, "");
}
var snippet = makeSnippet;
var TYPE_CONSTRUCTOR_OPTIONS = [
  "kind",
  "multi",
  "resolve",
  "construct",
  "instanceOf",
  "predicate",
  "represent",
  "representName",
  "defaultStyle",
  "styleAliases"
];
var YAML_NODE_KINDS = [
  "scalar",
  "sequence",
  "mapping"
];
function compileStyleAliases(map2) {
  var result = {};
  if (map2 !== null) {
    Object.keys(map2).forEach(function(style) {
      map2[style].forEach(function(alias) {
        result[String(alias)] = style;
      });
    });
  }
  return result;
}
function Type$1(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function(name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });
  this.options = options;
  this.tag = tag;
  this.kind = options["kind"] || null;
  this.resolve = options["resolve"] || function() {
    return true;
  };
  this.construct = options["construct"] || function(data) {
    return data;
  };
  this.instanceOf = options["instanceOf"] || null;
  this.predicate = options["predicate"] || null;
  this.represent = options["represent"] || null;
  this.representName = options["representName"] || null;
  this.defaultStyle = options["defaultStyle"] || null;
  this.multi = options["multi"] || false;
  this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}
var type = Type$1;
function compileList(schema2, name) {
  var result = [];
  schema2[name].forEach(function(currentType) {
    var newIndex = result.length;
    result.forEach(function(previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
        newIndex = previousIndex;
      }
    });
    result[newIndex] = currentType;
  });
  return result;
}
function compileMap() {
  var result = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {},
    multi: {
      scalar: [],
      sequence: [],
      mapping: [],
      fallback: []
    }
  }, index, length;
  function collectType(type2) {
    if (type2.multi) {
      result.multi[type2.kind].push(type2);
      result.multi["fallback"].push(type2);
    } else {
      result[type2.kind][type2.tag] = result["fallback"][type2.tag] = type2;
    }
  }
  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}
function Schema$1(definition) {
  return this.extend(definition);
}
Schema$1.prototype.extend = function extend2(definition) {
  var implicit = [];
  var explicit = [];
  if (definition instanceof type) {
    explicit.push(definition);
  } else if (Array.isArray(definition)) {
    explicit = explicit.concat(definition);
  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
    if (definition.implicit)
      implicit = implicit.concat(definition.implicit);
    if (definition.explicit)
      explicit = explicit.concat(definition.explicit);
  } else {
    throw new exception("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
  }
  implicit.forEach(function(type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
    if (type$1.loadKind && type$1.loadKind !== "scalar") {
      throw new exception("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
    }
    if (type$1.multi) {
      throw new exception("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
    }
  });
  explicit.forEach(function(type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
  });
  var result = Object.create(Schema$1.prototype);
  result.implicit = (this.implicit || []).concat(implicit);
  result.explicit = (this.explicit || []).concat(explicit);
  result.compiledImplicit = compileList(result, "implicit");
  result.compiledExplicit = compileList(result, "explicit");
  result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
  return result;
};
var schema = Schema$1;
var str = new type("tag:yaml.org,2002:str", {
  kind: "scalar",
  construct: function(data) {
    return data !== null ? data : "";
  }
});
var seq = new type("tag:yaml.org,2002:seq", {
  kind: "sequence",
  construct: function(data) {
    return data !== null ? data : [];
  }
});
var map = new type("tag:yaml.org,2002:map", {
  kind: "mapping",
  construct: function(data) {
    return data !== null ? data : {};
  }
});
var failsafe = new schema({
  explicit: [
    str,
    seq,
    map
  ]
});
function resolveYamlNull(data) {
  if (data === null)
    return true;
  var max = data.length;
  return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
}
function constructYamlNull() {
  return null;
}
function isNull(object) {
  return object === null;
}
var _null = new type("tag:yaml.org,2002:null", {
  kind: "scalar",
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function() {
      return "~";
    },
    lowercase: function() {
      return "null";
    },
    uppercase: function() {
      return "NULL";
    },
    camelcase: function() {
      return "Null";
    },
    empty: function() {
      return "";
    }
  },
  defaultStyle: "lowercase"
});
function resolveYamlBoolean(data) {
  if (data === null)
    return false;
  var max = data.length;
  return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
}
function constructYamlBoolean(data) {
  return data === "true" || data === "True" || data === "TRUE";
}
function isBoolean(object) {
  return Object.prototype.toString.call(object) === "[object Boolean]";
}
var bool = new type("tag:yaml.org,2002:bool", {
  kind: "scalar",
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function(object) {
      return object ? "true" : "false";
    },
    uppercase: function(object) {
      return object ? "TRUE" : "FALSE";
    },
    camelcase: function(object) {
      return object ? "True" : "False";
    }
  },
  defaultStyle: "lowercase"
});
function isHexCode(c) {
  return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
}
function isOctCode(c) {
  return 48 <= c && c <= 55;
}
function isDecCode(c) {
  return 48 <= c && c <= 57;
}
function resolveYamlInteger(data) {
  if (data === null)
    return false;
  var max = data.length, index = 0, hasDigits = false, ch;
  if (!max)
    return false;
  ch = data[index];
  if (ch === "-" || ch === "+") {
    ch = data[++index];
  }
  if (ch === "0") {
    if (index + 1 === max)
      return true;
    ch = data[++index];
    if (ch === "b") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (ch !== "0" && ch !== "1")
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "x") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isHexCode(data.charCodeAt(index)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "o") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isOctCode(data.charCodeAt(index)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
  }
  if (ch === "_")
    return false;
  for (; index < max; index++) {
    ch = data[index];
    if (ch === "_")
      continue;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }
  if (!hasDigits || ch === "_")
    return false;
  return true;
}
function constructYamlInteger(data) {
  var value = data, sign = 1, ch;
  if (value.indexOf("_") !== -1) {
    value = value.replace(/_/g, "");
  }
  ch = value[0];
  if (ch === "-" || ch === "+") {
    if (ch === "-")
      sign = -1;
    value = value.slice(1);
    ch = value[0];
  }
  if (value === "0")
    return 0;
  if (ch === "0") {
    if (value[1] === "b")
      return sign * parseInt(value.slice(2), 2);
    if (value[1] === "x")
      return sign * parseInt(value.slice(2), 16);
    if (value[1] === "o")
      return sign * parseInt(value.slice(2), 8);
  }
  return sign * parseInt(value, 10);
}
function isInteger(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
}
var int = new type("tag:yaml.org,2002:int", {
  kind: "scalar",
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary: function(obj) {
      return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
    },
    octal: function(obj) {
      return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
    },
    decimal: function(obj) {
      return obj.toString(10);
    },
    /* eslint-disable max-len */
    hexadecimal: function(obj) {
      return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
    }
  },
  defaultStyle: "decimal",
  styleAliases: {
    binary: [2, "bin"],
    octal: [8, "oct"],
    decimal: [10, "dec"],
    hexadecimal: [16, "hex"]
  }
});
var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
);
function resolveYamlFloat(data) {
  if (data === null)
    return false;
  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === "_") {
    return false;
  }
  return true;
}
function constructYamlFloat(data) {
  var value, sign;
  value = data.replace(/_/g, "").toLowerCase();
  sign = value[0] === "-" ? -1 : 1;
  if ("+-".indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }
  if (value === ".inf") {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === ".nan") {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}
var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
function representYamlFloat(object, style) {
  var res;
  if (isNaN(object)) {
    switch (style) {
      case "lowercase":
        return ".nan";
      case "uppercase":
        return ".NAN";
      case "camelcase":
        return ".NaN";
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return ".inf";
      case "uppercase":
        return ".INF";
      case "camelcase":
        return ".Inf";
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return "-.inf";
      case "uppercase":
        return "-.INF";
      case "camelcase":
        return "-.Inf";
    }
  } else if (common.isNegativeZero(object)) {
    return "-0.0";
  }
  res = object.toString(10);
  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
}
function isFloat(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
}
var float = new type("tag:yaml.org,2002:float", {
  kind: "scalar",
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: "lowercase"
});
var json = failsafe.extend({
  implicit: [
    _null,
    bool,
    int,
    float
  ]
});
var core = json;
var YAML_DATE_REGEXP = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
);
var YAML_TIMESTAMP_REGEXP = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
);
function resolveYamlTimestamp(data) {
  if (data === null)
    return false;
  if (YAML_DATE_REGEXP.exec(data) !== null)
    return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
    return true;
  return false;
}
function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null)
    match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null)
    throw new Error("Date resolve error");
  year = +match[1];
  month = +match[2] - 1;
  day = +match[3];
  if (!match[4]) {
    return new Date(Date.UTC(year, month, day));
  }
  hour = +match[4];
  minute = +match[5];
  second = +match[6];
  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) {
      fraction += "0";
    }
    fraction = +fraction;
  }
  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 6e4;
    if (match[9] === "-")
      delta = -delta;
  }
  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta)
    date.setTime(date.getTime() - delta);
  return date;
}
function representYamlTimestamp(object) {
  return object.toISOString();
}
var timestamp = new type("tag:yaml.org,2002:timestamp", {
  kind: "scalar",
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});
function resolveYamlMerge(data) {
  return data === "<<" || data === null;
}
var merge = new type("tag:yaml.org,2002:merge", {
  kind: "scalar",
  resolve: resolveYamlMerge
});
var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
function resolveYamlBinary(data) {
  if (data === null)
    return false;
  var code, idx, bitlen = 0, max = data.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    code = map2.indexOf(data.charAt(idx));
    if (code > 64)
      continue;
    if (code < 0)
      return false;
    bitlen += 6;
  }
  return bitlen % 8 === 0;
}
function constructYamlBinary(data) {
  var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map2 = BASE64_MAP, bits = 0, result = [];
  for (idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 255);
      result.push(bits >> 8 & 255);
      result.push(bits & 255);
    }
    bits = bits << 6 | map2.indexOf(input.charAt(idx));
  }
  tailbits = max % 4 * 6;
  if (tailbits === 0) {
    result.push(bits >> 16 & 255);
    result.push(bits >> 8 & 255);
    result.push(bits & 255);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 255);
    result.push(bits >> 2 & 255);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 255);
  }
  return new Uint8Array(result);
}
function representYamlBinary(object) {
  var result = "", bits = 0, idx, tail, max = object.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map2[bits >> 18 & 63];
      result += map2[bits >> 12 & 63];
      result += map2[bits >> 6 & 63];
      result += map2[bits & 63];
    }
    bits = (bits << 8) + object[idx];
  }
  tail = max % 3;
  if (tail === 0) {
    result += map2[bits >> 18 & 63];
    result += map2[bits >> 12 & 63];
    result += map2[bits >> 6 & 63];
    result += map2[bits & 63];
  } else if (tail === 2) {
    result += map2[bits >> 10 & 63];
    result += map2[bits >> 4 & 63];
    result += map2[bits << 2 & 63];
    result += map2[64];
  } else if (tail === 1) {
    result += map2[bits >> 2 & 63];
    result += map2[bits << 4 & 63];
    result += map2[64];
    result += map2[64];
  }
  return result;
}
function isBinary(obj) {
  return Object.prototype.toString.call(obj) === "[object Uint8Array]";
}
var binary = new type("tag:yaml.org,2002:binary", {
  kind: "scalar",
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});
var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
var _toString$2 = Object.prototype.toString;
function resolveYamlOmap(data) {
  if (data === null)
    return true;
  var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;
    if (_toString$2.call(pair) !== "[object Object]")
      return false;
    for (pairKey in pair) {
      if (_hasOwnProperty$3.call(pair, pairKey)) {
        if (!pairHasKey)
          pairHasKey = true;
        else
          return false;
      }
    }
    if (!pairHasKey)
      return false;
    if (objectKeys.indexOf(pairKey) === -1)
      objectKeys.push(pairKey);
    else
      return false;
  }
  return true;
}
function constructYamlOmap(data) {
  return data !== null ? data : [];
}
var omap = new type("tag:yaml.org,2002:omap", {
  kind: "sequence",
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});
var _toString$1 = Object.prototype.toString;
function resolveYamlPairs(data) {
  if (data === null)
    return true;
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    if (_toString$1.call(pair) !== "[object Object]")
      return false;
    keys = Object.keys(pair);
    if (keys.length !== 1)
      return false;
    result[index] = [keys[0], pair[keys[0]]];
  }
  return true;
}
function constructYamlPairs(data) {
  if (data === null)
    return [];
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    keys = Object.keys(pair);
    result[index] = [keys[0], pair[keys[0]]];
  }
  return result;
}
var pairs = new type("tag:yaml.org,2002:pairs", {
  kind: "sequence",
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});
var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
function resolveYamlSet(data) {
  if (data === null)
    return true;
  var key, object = data;
  for (key in object) {
    if (_hasOwnProperty$2.call(object, key)) {
      if (object[key] !== null)
        return false;
    }
  }
  return true;
}
function constructYamlSet(data) {
  return data !== null ? data : {};
}
var set = new type("tag:yaml.org,2002:set", {
  kind: "mapping",
  resolve: resolveYamlSet,
  construct: constructYamlSet
});
var _default = core.extend({
  implicit: [
    timestamp,
    merge
  ],
  explicit: [
    binary,
    omap,
    pairs,
    set
  ]
});
var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
function _class(obj) {
  return Object.prototype.toString.call(obj);
}
function is_EOL(c) {
  return c === 10 || c === 13;
}
function is_WHITE_SPACE(c) {
  return c === 9 || c === 32;
}
function is_WS_OR_EOL(c) {
  return c === 9 || c === 32 || c === 10 || c === 13;
}
function is_FLOW_INDICATOR(c) {
  return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
}
function fromHexCode(c) {
  var lc;
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  lc = c | 32;
  if (97 <= lc && lc <= 102) {
    return lc - 97 + 10;
  }
  return -1;
}
function escapedHexLen(c) {
  if (c === 120) {
    return 2;
  }
  if (c === 117) {
    return 4;
  }
  if (c === 85) {
    return 8;
  }
  return 0;
}
function fromDecimalCode(c) {
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  return -1;
}
function simpleEscapeSequence(c) {
  return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
}
function charFromCodepoint(c) {
  if (c <= 65535) {
    return String.fromCharCode(c);
  }
  return String.fromCharCode(
    (c - 65536 >> 10) + 55296,
    (c - 65536 & 1023) + 56320
  );
}
var simpleEscapeCheck = new Array(256);
var simpleEscapeMap = new Array(256);
for (i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}
var i;
function State$1(input, options) {
  this.input = input;
  this.filename = options["filename"] || null;
  this.schema = options["schema"] || _default;
  this.onWarning = options["onWarning"] || null;
  this.legacy = options["legacy"] || false;
  this.json = options["json"] || false;
  this.listener = options["listener"] || null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;
  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0;
  this.firstTabInLine = -1;
  this.documents = [];
}
function generateError(state, message) {
  var mark = {
    name: state.filename,
    buffer: state.input.slice(0, -1),
    // omit trailing \0
    position: state.position,
    line: state.line,
    column: state.position - state.lineStart
  };
  mark.snippet = snippet(mark);
  return new exception(message, mark);
}
function throwError(state, message) {
  throw generateError(state, message);
}
function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}
var directiveHandlers = {
  YAML: function handleYamlDirective(state, name, args) {
    var match, major, minor;
    if (state.version !== null) {
      throwError(state, "duplication of %YAML directive");
    }
    if (args.length !== 1) {
      throwError(state, "YAML directive accepts exactly one argument");
    }
    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
    if (match === null) {
      throwError(state, "ill-formed argument of the YAML directive");
    }
    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);
    if (major !== 1) {
      throwError(state, "unacceptable YAML version of the document");
    }
    state.version = args[0];
    state.checkLineBreaks = minor < 2;
    if (minor !== 1 && minor !== 2) {
      throwWarning(state, "unsupported YAML version of the document");
    }
  },
  TAG: function handleTagDirective(state, name, args) {
    var handle, prefix;
    if (args.length !== 2) {
      throwError(state, "TAG directive accepts exactly two arguments");
    }
    handle = args[0];
    prefix = args[1];
    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
    }
    if (_hasOwnProperty$1.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }
    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
    }
    try {
      prefix = decodeURIComponent(prefix);
    } catch (err) {
      throwError(state, "tag prefix is malformed: " + prefix);
    }
    state.tagMap[handle] = prefix;
  }
};
function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;
  if (start < end) {
    _result = state.input.slice(start, end);
    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
          throwError(state, "expected valid JSON character");
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, "the stream contains non-printable characters");
    }
    state.result += _result;
  }
}
function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;
  if (!common.isObject(source)) {
    throwError(state, "cannot merge mappings; the provided source object is unacceptable");
  }
  sourceKeys = Object.keys(source);
  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];
    if (!_hasOwnProperty$1.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}
function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
  var index, quantity;
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);
    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, "nested arrays are not supported inside keys");
      }
      if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
        keyNode[index] = "[object Object]";
      }
    }
  }
  if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
    keyNode = "[object Object]";
  }
  keyNode = String(keyNode);
  if (_result === null) {
    _result = {};
  }
  if (keyTag === "tag:yaml.org,2002:merge") {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, "duplicated mapping key");
    }
    if (keyNode === "__proto__") {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }
  return _result;
}
function readLineBreak(state) {
  var ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 10) {
    state.position++;
  } else if (ch === 13) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 10) {
      state.position++;
    }
  } else {
    throwError(state, "a line break is expected");
  }
  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}
function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 9 && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }
    if (allowComments && ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 10 && ch !== 13 && ch !== 0);
    }
    if (is_EOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;
      while (ch === 32) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }
  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, "deficient indentation");
  }
  return lineBreaks;
}
function testDocumentSeparator(state) {
  var _position = state.position, ch;
  ch = state.input.charCodeAt(_position);
  if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);
    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }
  return false;
}
function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += " ";
  } else if (count > 1) {
    state.result += common.repeat("\n", count - 1);
  }
}
function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
  ch = state.input.charCodeAt(state.position);
  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
    return false;
  }
  if (ch === 63 || ch === 45) {
    following = state.input.charCodeAt(state.position + 1);
    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }
  state.kind = "scalar";
  state.result = "";
  captureStart = captureEnd = state.position;
  hasPendingContent = false;
  while (ch !== 0) {
    if (ch === 58) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }
    } else if (ch === 35) {
      preceding = state.input.charCodeAt(state.position - 1);
      if (is_WS_OR_EOL(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);
      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }
    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }
    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }
    ch = state.input.charCodeAt(++state.position);
  }
  captureSegment(state, captureStart, captureEnd, false);
  if (state.result) {
    return true;
  }
  state.kind = _kind;
  state.result = _result;
  return false;
}
function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 39) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 39) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (ch === 39) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a single quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a single quoted scalar");
}
function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 34) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 34) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    } else if (ch === 92) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;
        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);
          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            throwError(state, "expected hexadecimal character");
          }
        }
        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        throwError(state, "unknown escape sequence");
      }
      captureStart = captureEnd = state.position;
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a double quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a double quoted scalar");
}
function readFlowCollection(state, nodeIndent) {
  var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 91) {
    terminator = 93;
    isMapping = false;
    _result = [];
  } else if (ch === 123) {
    terminator = 125;
    isMapping = true;
    _result = {};
  } else {
    return false;
  }
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(++state.position);
  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? "mapping" : "sequence";
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, "missed comma between flow collection entries");
    } else if (ch === 44) {
      throwError(state, "expected the node content, but found ','");
    }
    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;
    if (ch === 63) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }
    _line = state.line;
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if ((isExplicitPair || state.line === _line) && ch === 58) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }
    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === 44) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }
  throwError(state, "unexpected end of the stream within a flow collection");
}
function readBlockScalar(state, nodeIndent) {
  var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 124) {
    folding = false;
  } else if (ch === 62) {
    folding = true;
  } else {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);
    if (ch === 43 || ch === 45) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, "repeat of a chomping mode identifier");
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, "repeat of an indentation width identifier");
      }
    } else {
      break;
    }
  }
  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));
    if (ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!is_EOL(ch) && ch !== 0);
    }
  }
  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);
    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }
    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }
    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }
    if (state.lineIndent < textIndent) {
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          state.result += "\n";
        }
      }
      break;
    }
    if (folding) {
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat("\n", emptyLines + 1);
      } else if (emptyLines === 0) {
        if (didReadContent) {
          state.result += " ";
        }
      } else {
        state.result += common.repeat("\n", emptyLines);
      }
    } else {
      state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
    }
    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;
    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, state.position, false);
  }
  return true;
}
function readBlockSequence(state, nodeIndent) {
  var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
  if (state.firstTabInLine !== -1)
    return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    if (ch !== 45) {
      break;
    }
    following = state.input.charCodeAt(state.position + 1);
    if (!is_WS_OR_EOL(following)) {
      break;
    }
    detected = true;
    state.position++;
    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }
    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a sequence entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "sequence";
    state.result = _result;
    return true;
  }
  return false;
}
function readBlockMapping(state, nodeIndent, flowIndent) {
  var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
  if (state.firstTabInLine !== -1)
    return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line;
    if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
      if (ch === 63) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }
        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
      }
      state.position += 1;
      ch = following;
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;
      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        break;
      }
      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 58) {
          ch = state.input.charCodeAt(++state.position);
          if (!is_WS_OR_EOL(ch)) {
            throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
          }
          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          throwError(state, "can not read an implicit mapping pair; a colon is missed");
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true;
        }
      } else if (detected) {
        throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true;
      }
    }
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }
      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a mapping entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "mapping";
    state.result = _result;
  }
  return detected;
}
function readTagProperty(state) {
  var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 33)
    return false;
  if (state.tag !== null) {
    throwError(state, "duplication of a tag property");
  }
  ch = state.input.charCodeAt(++state.position);
  if (ch === 60) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 33) {
    isNamed = true;
    tagHandle = "!!";
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = "!";
  }
  _position = state.position;
  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 62);
    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, "unexpected end of the stream within a verbatim tag");
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 33) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);
          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, "named tag handle cannot contain such characters");
          }
          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, "tag suffix cannot contain exclamation marks");
        }
      }
      ch = state.input.charCodeAt(++state.position);
    }
    tagName = state.input.slice(_position, state.position);
    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, "tag suffix cannot contain flow indicator characters");
    }
  }
  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, "tag name cannot contain such characters: " + tagName);
  }
  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, "tag name is malformed: " + tagName);
  }
  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === "!") {
    state.tag = "!" + tagName;
  } else if (tagHandle === "!!") {
    state.tag = "tag:yaml.org,2002:" + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }
  return true;
}
function readAnchorProperty(state) {
  var _position, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 38)
    return false;
  if (state.anchor !== null) {
    throwError(state, "duplication of an anchor property");
  }
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an anchor node must contain at least one character");
  }
  state.anchor = state.input.slice(_position, state.position);
  return true;
}
function readAlias(state) {
  var _position, alias, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 42)
    return false;
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an alias node must contain at least one character");
  }
  alias = state.input.slice(_position, state.position);
  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }
  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}
function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type2, flowIndent, blockIndent;
  if (state.listener !== null) {
    state.listener("open", state);
  }
  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;
      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }
  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }
  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }
  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }
    blockIndent = state.position - state.lineStart;
    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;
          if (state.tag !== null || state.anchor !== null) {
            throwError(state, "alias node should not have any properties");
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;
          if (state.tag === null) {
            state.tag = "?";
          }
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }
  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }
  } else if (state.tag === "?") {
    if (state.result !== null && state.kind !== "scalar") {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }
    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type2 = state.implicitTypes[typeIndex];
      if (type2.resolve(state.result)) {
        state.result = type2.construct(state.result);
        state.tag = type2.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== "!") {
    if (_hasOwnProperty$1.call(state.typeMap[state.kind || "fallback"], state.tag)) {
      type2 = state.typeMap[state.kind || "fallback"][state.tag];
    } else {
      type2 = null;
      typeList = state.typeMap.multi[state.kind || "fallback"];
      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type2 = typeList[typeIndex];
          break;
        }
      }
    }
    if (!type2) {
      throwError(state, "unknown tag !<" + state.tag + ">");
    }
    if (state.result !== null && type2.kind !== state.kind) {
      throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type2.kind + '", not "' + state.kind + '"');
    }
    if (!type2.resolve(state.result, state.tag)) {
      throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
    } else {
      state.result = type2.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }
  if (state.listener !== null) {
    state.listener("close", state);
  }
  return state.tag !== null || state.anchor !== null || hasContent;
}
function readDocument(state) {
  var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = /* @__PURE__ */ Object.create(null);
  state.anchorMap = /* @__PURE__ */ Object.create(null);
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if (state.lineIndent > 0 || ch !== 37) {
      break;
    }
    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];
    if (directiveName.length < 1) {
      throwError(state, "directive name must not be less than one character in length");
    }
    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !is_EOL(ch));
        break;
      }
      if (is_EOL(ch))
        break;
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveArgs.push(state.input.slice(_position, state.position));
    }
    if (ch !== 0)
      readLineBreak(state);
    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }
  skipSeparationSpace(state, true, -1);
  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    throwError(state, "directives end mark is expected");
  }
  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);
  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, "non-ASCII line breaks are interpreted as content");
  }
  state.documents.push(state.result);
  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 46) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }
  if (state.position < state.length - 1) {
    throwError(state, "end of the stream or a document separator is expected");
  } else {
    return;
  }
}
function loadDocuments(input, options) {
  input = String(input);
  options = options || {};
  if (input.length !== 0) {
    if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
      input += "\n";
    }
    if (input.charCodeAt(0) === 65279) {
      input = input.slice(1);
    }
  }
  var state = new State$1(input, options);
  var nullpos = input.indexOf("\0");
  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, "null byte is not allowed in input");
  }
  state.input += "\0";
  while (state.input.charCodeAt(state.position) === 32) {
    state.lineIndent += 1;
    state.position += 1;
  }
  while (state.position < state.length - 1) {
    readDocument(state);
  }
  return state.documents;
}
function loadAll$1(input, iterator, options) {
  if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
    options = iterator;
    iterator = null;
  }
  var documents = loadDocuments(input, options);
  if (typeof iterator !== "function") {
    return documents;
  }
  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}
function load$1(input, options) {
  var documents = loadDocuments(input, options);
  if (documents.length === 0) {
    return void 0;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new exception("expected a single document in the stream, but found more");
}
var loadAll_1 = loadAll$1;
var load_1 = load$1;
var loader = {
  loadAll: loadAll_1,
  load: load_1
};
var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CHAR_BOM = 65279;
var CHAR_TAB = 9;
var CHAR_LINE_FEED = 10;
var CHAR_CARRIAGE_RETURN = 13;
var CHAR_SPACE = 32;
var CHAR_EXCLAMATION = 33;
var CHAR_DOUBLE_QUOTE = 34;
var CHAR_SHARP = 35;
var CHAR_PERCENT = 37;
var CHAR_AMPERSAND = 38;
var CHAR_SINGLE_QUOTE = 39;
var CHAR_ASTERISK = 42;
var CHAR_COMMA = 44;
var CHAR_MINUS = 45;
var CHAR_COLON = 58;
var CHAR_EQUALS = 61;
var CHAR_GREATER_THAN = 62;
var CHAR_QUESTION = 63;
var CHAR_COMMERCIAL_AT = 64;
var CHAR_LEFT_SQUARE_BRACKET = 91;
var CHAR_RIGHT_SQUARE_BRACKET = 93;
var CHAR_GRAVE_ACCENT = 96;
var CHAR_LEFT_CURLY_BRACKET = 123;
var CHAR_VERTICAL_LINE = 124;
var CHAR_RIGHT_CURLY_BRACKET = 125;
var ESCAPE_SEQUENCES = {};
ESCAPE_SEQUENCES[0] = "\\0";
ESCAPE_SEQUENCES[7] = "\\a";
ESCAPE_SEQUENCES[8] = "\\b";
ESCAPE_SEQUENCES[9] = "\\t";
ESCAPE_SEQUENCES[10] = "\\n";
ESCAPE_SEQUENCES[11] = "\\v";
ESCAPE_SEQUENCES[12] = "\\f";
ESCAPE_SEQUENCES[13] = "\\r";
ESCAPE_SEQUENCES[27] = "\\e";
ESCAPE_SEQUENCES[34] = '\\"';
ESCAPE_SEQUENCES[92] = "\\\\";
ESCAPE_SEQUENCES[133] = "\\N";
ESCAPE_SEQUENCES[160] = "\\_";
ESCAPE_SEQUENCES[8232] = "\\L";
ESCAPE_SEQUENCES[8233] = "\\P";
var DEPRECATED_BOOLEANS_SYNTAX = [
  "y",
  "Y",
  "yes",
  "Yes",
  "YES",
  "on",
  "On",
  "ON",
  "n",
  "N",
  "no",
  "No",
  "NO",
  "off",
  "Off",
  "OFF"
];
var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
function compileStyleMap(schema2, map2) {
  var result, keys, index, length, tag, style, type2;
  if (map2 === null)
    return {};
  result = {};
  keys = Object.keys(map2);
  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map2[tag]);
    if (tag.slice(0, 2) === "!!") {
      tag = "tag:yaml.org,2002:" + tag.slice(2);
    }
    type2 = schema2.compiledTypeMap["fallback"][tag];
    if (type2 && _hasOwnProperty.call(type2.styleAliases, style)) {
      style = type2.styleAliases[style];
    }
    result[tag] = style;
  }
  return result;
}
function encodeHex(character) {
  var string, handle, length;
  string = character.toString(16).toUpperCase();
  if (character <= 255) {
    handle = "x";
    length = 2;
  } else if (character <= 65535) {
    handle = "u";
    length = 4;
  } else if (character <= 4294967295) {
    handle = "U";
    length = 8;
  } else {
    throw new exception("code point within a string may not be greater than 0xFFFFFFFF");
  }
  return "\\" + handle + common.repeat("0", length - string.length) + string;
}
var QUOTING_TYPE_SINGLE = 1;
var QUOTING_TYPE_DOUBLE = 2;
function State(options) {
  this.schema = options["schema"] || _default;
  this.indent = Math.max(1, options["indent"] || 2);
  this.noArrayIndent = options["noArrayIndent"] || false;
  this.skipInvalid = options["skipInvalid"] || false;
  this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
  this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
  this.sortKeys = options["sortKeys"] || false;
  this.lineWidth = options["lineWidth"] || 80;
  this.noRefs = options["noRefs"] || false;
  this.noCompatMode = options["noCompatMode"] || false;
  this.condenseFlow = options["condenseFlow"] || false;
  this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes = options["forceQuotes"] || false;
  this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;
  this.tag = null;
  this.result = "";
  this.duplicates = [];
  this.usedDuplicates = null;
}
function indentString(string, spaces) {
  var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
  while (position < length) {
    next = string.indexOf("\n", position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }
    if (line.length && line !== "\n")
      result += ind;
    result += line;
  }
  return result;
}
function generateNextLine(state, level) {
  return "\n" + common.repeat(" ", state.indent * level);
}
function testImplicitResolving(state, str2) {
  var index, length, type2;
  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type2 = state.implicitTypes[index];
    if (type2.resolve(str2)) {
      return true;
    }
  }
  return false;
}
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}
function isPrintable(c) {
  return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
}
function isNsCharOrWhitespace(c) {
  return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
}
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (
    // ns-plain-safe
    (inblock ? (
      // c = flow-in
      cIsNsCharOrWhitespace
    ) : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar
  );
}
function isPlainSafeFirst(c) {
  return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
}
function isPlainSafeLast(c) {
  return !isWhitespace(c) && c !== CHAR_COLON;
}
function codePointAt(string, pos) {
  var first = string.charCodeAt(pos), second;
  if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);
    if (second >= 56320 && second <= 57343) {
      return (first - 55296) * 1024 + second - 56320 + 65536;
    }
  }
  return first;
}
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}
var STYLE_PLAIN = 1;
var STYLE_SINGLE = 2;
var STYLE_LITERAL = 3;
var STYLE_FOLDED = 4;
var STYLE_DOUBLE = 5;
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false;
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1;
  var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
  if (singleLineOnly || forceQuotes) {
    for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
  }
  if (!hasLineBreak && !hasFoldableLine) {
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}
function writeScalar(state, string, level, iskey, inblock) {
  state.dump = function() {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
      }
    }
    var indent = state.indent * Math.max(1, level);
    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
    var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
    function testAmbiguity(string2) {
      return testImplicitResolving(state, string2);
    }
    switch (chooseScalarStyle(
      string,
      singleLineOnly,
      state.indent,
      lineWidth,
      testAmbiguity,
      state.quotingType,
      state.forceQuotes && !iskey,
      inblock
    )) {
      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string) + '"';
      default:
        throw new exception("impossible error: invalid scalar style");
    }
  }();
}
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
  var clip = string[string.length - 1] === "\n";
  var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
  var chomp = keep ? "+" : clip ? "" : "-";
  return indentIndicator + chomp + "\n";
}
function dropEndingNewline(string) {
  return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
}
function foldString(string, width) {
  var lineRe = /(\n+)([^\n]*)/g;
  var result = function() {
    var nextLF = string.indexOf("\n");
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }();
  var prevMoreIndented = string[0] === "\n" || string[0] === " ";
  var moreIndented;
  var match;
  while (match = lineRe.exec(string)) {
    var prefix = match[1], line = match[2];
    moreIndented = line[0] === " ";
    result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }
  return result;
}
function foldLine(line, width) {
  if (line === "" || line[0] === " ")
    return line;
  var breakRe = / [^ ]/g;
  var match;
  var start = 0, end, curr = 0, next = 0;
  var result = "";
  while (match = breakRe.exec(line)) {
    next = match.index;
    if (next - start > width) {
      end = curr > start ? curr : next;
      result += "\n" + line.slice(start, end);
      start = end + 1;
    }
    curr = next;
  }
  result += "\n";
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }
  return result.slice(1);
}
function escapeString(string) {
  var result = "";
  var char = 0;
  var escapeSeq;
  for (var i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];
    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 65536)
        result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }
  return result;
}
function writeFlowSequence(state, level, object) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
      if (_result !== "")
        _result += "," + (!state.condenseFlow ? " " : "");
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = "[" + _result + "]";
}
function writeBlockSequence(state, level, object, compact) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
      if (!compact || _result !== "") {
        _result += generateNextLine(state, level);
      }
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += "-";
      } else {
        _result += "- ";
      }
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = _result || "[]";
}
function writeFlowMapping(state, level, object) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = "";
    if (_result !== "")
      pairBuffer += ", ";
    if (state.condenseFlow)
      pairBuffer += '"';
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level, objectKey, false, false)) {
      continue;
    }
    if (state.dump.length > 1024)
      pairBuffer += "? ";
    pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
    if (!writeNode(state, level, objectValue, false, false)) {
      continue;
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = "{" + _result + "}";
}
function writeBlockMapping(state, level, object, compact) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
  if (state.sortKeys === true) {
    objectKeyList.sort();
  } else if (typeof state.sortKeys === "function") {
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    throw new exception("sortKeys must be a boolean or a function");
  }
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = "";
    if (!compact || _result !== "") {
      pairBuffer += generateNextLine(state, level);
    }
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue;
    }
    explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += "?";
      } else {
        pairBuffer += "? ";
      }
    }
    pairBuffer += state.dump;
    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }
    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue;
    }
    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ":";
    } else {
      pairBuffer += ": ";
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = _result || "{}";
}
function detectType(state, object, explicit) {
  var _result, typeList, index, length, type2, style;
  typeList = explicit ? state.explicitTypes : state.implicitTypes;
  for (index = 0, length = typeList.length; index < length; index += 1) {
    type2 = typeList[index];
    if ((type2.instanceOf || type2.predicate) && (!type2.instanceOf || typeof object === "object" && object instanceof type2.instanceOf) && (!type2.predicate || type2.predicate(object))) {
      if (explicit) {
        if (type2.multi && type2.representName) {
          state.tag = type2.representName(object);
        } else {
          state.tag = type2.tag;
        }
      } else {
        state.tag = "?";
      }
      if (type2.represent) {
        style = state.styleMap[type2.tag] || type2.defaultStyle;
        if (_toString.call(type2.represent) === "[object Function]") {
          _result = type2.represent(object, style);
        } else if (_hasOwnProperty.call(type2.represent, style)) {
          _result = type2.represent[style](object, style);
        } else {
          throw new exception("!<" + type2.tag + '> tag resolver accepts not "' + style + '" style');
        }
        state.dump = _result;
      }
      return true;
    }
  }
  return false;
}
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;
  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }
  var type2 = _toString.call(state.dump);
  var inblock = block;
  var tagStr;
  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level;
  }
  var objectOrArray = type2 === "[object Object]" || type2 === "[object Array]", duplicateIndex, duplicate;
  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }
  if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
    compact = false;
  }
  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = "*ref_" + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type2 === "[object Object]") {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object Array]") {
      if (block && state.dump.length !== 0) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object String]") {
      if (state.tag !== "?") {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type2 === "[object Undefined]") {
      return false;
    } else {
      if (state.skipInvalid)
        return false;
      throw new exception("unacceptable kind of an object to dump " + type2);
    }
    if (state.tag !== null && state.tag !== "?") {
      tagStr = encodeURI(
        state.tag[0] === "!" ? state.tag.slice(1) : state.tag
      ).replace(/!/g, "%21");
      if (state.tag[0] === "!") {
        tagStr = "!" + tagStr;
      } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
        tagStr = "!!" + tagStr.slice(18);
      } else {
        tagStr = "!<" + tagStr + ">";
      }
      state.dump = tagStr + " " + state.dump;
    }
  }
  return true;
}
function getDuplicateReferences(object, state) {
  var objects = [], duplicatesIndexes = [], index, length;
  inspectNode(object, objects, duplicatesIndexes);
  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}
function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index, length;
  if (object !== null && typeof object === "object") {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);
      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);
        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}
function dump$1(input, options) {
  options = options || {};
  var state = new State(options);
  if (!state.noRefs)
    getDuplicateReferences(input, state);
  var value = input;
  if (state.replacer) {
    value = state.replacer.call({ "": value }, "", value);
  }
  if (writeNode(state, 0, value, true, true))
    return state.dump + "\n";
  return "";
}
var dump_1 = dump$1;
var dumper = {
  dump: dump_1
};
function renamed(from, to) {
  return function() {
    throw new Error("Function yaml." + from + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
  };
}
var load = loader.load;
var loadAll = loader.loadAll;
var dump = dumper.dump;
var safeLoad = renamed("safeLoad", "load");
var safeLoadAll = renamed("safeLoadAll", "loadAll");
var safeDump = renamed("safeDump", "dump");

// src/frontmatter/frontmatter.reader.ts
var FrontmatterReader = class {
  constructor(app) {
    this.app = app;
  }
  async readFrontmatter(file) {
    try {
      const content = await this.app.vault.read(file);
      const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
      if (!frontmatterMatch)
        return null;
      const parsed = load(frontmatterMatch[1]);
      if (parsed && parsed["atomic-task"]) {
        console.log(`[TaskSystem] Parsed frontmatter for atomic task:`, parsed);
      }
      return parsed || null;
    } catch (error) {
      console.error("Failed to read frontmatter:", error);
      return null;
    }
  }
  isAtomicNote(frontmatter) {
    return (frontmatter == null ? void 0 : frontmatter["atomic-task"]) === true;
  }
  async isFileAtomicNote(file) {
    const frontmatter = await this.readFrontmatter(file);
    return frontmatter ? this.isAtomicNote(frontmatter) : false;
  }
  extractFrontmatterFromContent(content) {
    const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---([\s\S]*)$/);
    if (!frontmatterMatch) {
      return { frontmatter: null, contentWithoutFrontmatter: content };
    }
    try {
      const frontmatter = load(frontmatterMatch[1]);
      const contentWithoutFrontmatter = frontmatterMatch[2] || "";
      return { frontmatter: frontmatter || null, contentWithoutFrontmatter };
    } catch (error) {
      console.error("Failed to parse frontmatter:", error);
      return { frontmatter: null, contentWithoutFrontmatter: content };
    }
  }
};

// src/frontmatter/frontmatter.writer.ts
var FrontmatterWriter = class {
  constructor(app) {
    this.app = app;
  }
  async writeFrontmatter(file, frontmatter) {
    try {
      if (frontmatter["atomic-task"]) {
        console.log(`[TaskSystem] Writing frontmatter for atomic task:`, frontmatter);
      }
      const content = await this.app.vault.read(file);
      const yamlString = dump(frontmatter, {
        indent: 2,
        lineWidth: -1,
        noRefs: true,
        sortKeys: false,
        quotingType: '"',
        forceQuotes: false
      });
      let newContent;
      if (content.startsWith("---\n")) {
        newContent = content.replace(/^---\n[\s\S]*?\n---/, `---
${yamlString}---`);
      } else {
        newContent = `---
${yamlString}---

${content}`;
      }
      await this.app.vault.modify(file, newContent);
    } catch (error) {
      console.error("Failed to write frontmatter:", error);
      throw error;
    }
  }
  async updateFrontmatterField(file, fieldName, value) {
    try {
      const content = await this.app.vault.read(file);
      const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
      let frontmatter = {};
      if (frontmatterMatch) {
        frontmatter = load(frontmatterMatch[1]) || {};
      }
      frontmatter[fieldName] = value;
      await this.writeFrontmatter(file, frontmatter);
    } catch (error) {
      console.error(`Failed to update frontmatter field ${fieldName}:`, error);
      throw error;
    }
  }
  formatFrontmatterForDisplay(frontmatter) {
    try {
      return dump(frontmatter, {
        indent: 2,
        lineWidth: -1,
        noRefs: true,
        sortKeys: false
      });
    } catch (error) {
      console.error("Failed to format frontmatter for display:", error);
      return JSON.stringify(frontmatter, null, 2);
    }
  }
};

// src/utils/date.utils.ts
var DateUtils = class {
  static formatCurrentDate() {
    return new Date().toISOString().split("T")[0];
  }
  static isValidDateString(dateStr) {
    if (!dateStr || typeof dateStr !== "string")
      return false;
    const isoDateRegex = /^\d{4}-\d{2}-\d{2}$/;
    if (!isoDateRegex.test(dateStr))
      return false;
    const date = new Date(dateStr);
    return date instanceof Date && !isNaN(date.getTime()) && date.toISOString().startsWith(dateStr);
  }
  static parseDate(dateStr) {
    if (!this.isValidDateString(dateStr))
      return null;
    try {
      return new Date(dateStr);
    } catch (e) {
      return null;
    }
  }
  static formatDate(date, format = "YYYY-MM-DD") {
    if (!(date instanceof Date) || isNaN(date.getTime())) {
      return "";
    }
    switch (format) {
      case "YYYY-MM-DD":
        return date.toISOString().split("T")[0];
      case "MM/DD/YYYY":
        return date.toLocaleDateString("en-US");
      case "DD/MM/YYYY":
        return date.toLocaleDateString("en-GB");
      default:
        return date.toISOString().split("T")[0];
    }
  }
};

// src/schema/schema.validator.ts
var SchemaValidator = class {
  /**
   * Validate frontmatter against dynamic schema
   */
  static validate(frontmatter, statusConfigs, customFields = []) {
    const result = {
      isValid: true,
      errors: [],
      warnings: []
    };
    if (!frontmatter["atomic-task"]) {
      return result;
    }
    const schemaFields = getCombinedSchemaFields(statusConfigs, customFields);
    const requiredFields = getRequiredFields(customFields);
    for (const field of requiredFields) {
      if (!frontmatter.hasOwnProperty(field) || frontmatter[field] === null || frontmatter[field] === void 0 || frontmatter[field] === "") {
        result.errors.push({
          field,
          message: `Required field '${field}' is missing or empty`,
          severity: "error"
        });
        result.isValid = false;
      }
    }
    this.validateSchemaFields(frontmatter, schemaFields, result);
    this.validateLogicalRules(frontmatter, result, statusConfigs);
    return result;
  }
  /**
   * Validate each field according to its schema definition
   */
  static validateSchemaFields(frontmatter, schemaFields, result) {
    for (const field of schemaFields) {
      const value = frontmatter[field.name];
      if (value === void 0 || value === null) {
        continue;
      }
      this.validateFieldType(field.name, value, field.type, field.enumValues, result);
    }
  }
  /**
   * Validate a single field's type and value
   */
  static validateFieldType(fieldName, value, fieldType, enumValues, result) {
    switch (fieldType) {
      case "boolean":
        if (typeof value !== "boolean") {
          result.errors.push({
            field: fieldName,
            message: `${fieldName} must be a boolean (true or false)`,
            severity: "error"
          });
          result.isValid = false;
        }
        break;
      case "string":
      case "text":
        if (typeof value !== "string") {
          result.errors.push({
            field: fieldName,
            message: `${fieldName} must be a string`,
            severity: "error"
          });
          result.isValid = false;
        }
        break;
      case "number":
        if (typeof value !== "number" && !isNaN(Number(value))) {
          result.errors.push({
            field: fieldName,
            message: `${fieldName} must be a number`,
            severity: "error"
          });
          result.isValid = false;
        }
        break;
      case "date":
        if (value instanceof Date) {
          break;
        } else if (typeof value === "string" && value !== "" && !DateUtils.isValidDateString(value)) {
          result.errors.push({
            field: fieldName,
            message: `${fieldName} must be a valid date in YYYY-MM-DD format`,
            severity: "error"
          });
          result.isValid = false;
        }
        break;
      case "array":
      case "list":
        if (!Array.isArray(value)) {
          result.errors.push({
            field: fieldName,
            message: `${fieldName} must be an array/list`,
            severity: "error"
          });
          result.isValid = false;
        }
        break;
      case "enum":
        if (enumValues && !enumValues.includes(value)) {
          result.errors.push({
            field: fieldName,
            message: `${fieldName} must be one of: ${enumValues.join(", ")}`,
            severity: "error"
          });
          result.isValid = false;
        }
        break;
    }
  }
  static validateLogicalRules(frontmatter, result, statusConfigs) {
    const completedStatuses = statusConfigs.filter((s) => s.isCompleted).map((s) => s.value);
    const isCompleted = completedStatuses.includes(frontmatter.status);
    if (frontmatter.completed_date && !isCompleted) {
      result.warnings.push({
        field: "completed_date",
        message: `completed_date is set but status is not a completed status (${completedStatuses.join(", ")})`,
        severity: "warning"
      });
    }
    if (isCompleted && !frontmatter.completed_date) {
      result.warnings.push({
        field: "completed_date",
        message: "status is completed but completed_date is not set",
        severity: "warning"
      });
    }
    if (frontmatter.due_date && !isCompleted) {
      const dueDate = DateUtils.parseDate(frontmatter.due_date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      if (dueDate && dueDate < today) {
        result.warnings.push({
          field: "due_date",
          message: "due_date is in the past",
          severity: "warning"
        });
      }
    }
  }
  static getValidationSummary(result) {
    if (result.isValid && result.warnings.length === 0) {
      return "Schema validation passed";
    }
    const parts = [];
    if (result.errors.length > 0) {
      parts.push(`${result.errors.length} error${result.errors.length > 1 ? "s" : ""}`);
    }
    if (result.warnings.length > 0) {
      parts.push(`${result.warnings.length} warning${result.warnings.length > 1 ? "s" : ""}`);
    }
    return `Schema validation: ${parts.join(", ")}`;
  }
};

// src/schema/schema.defaults.ts
var DefaultValueAssigner = class {
  static assignDefaults(frontmatter, filename, settings) {
    var _a;
    const updated = { ...frontmatter };
    if (!updated.title || updated.title === "") {
      updated.title = this.extractTitleFromFilename(filename);
    }
    if (!updated.created_date || updated.created_date === "") {
      updated.created_date = DateUtils.formatCurrentDate();
      console.log(`[TaskSystem] Setting created_date to: ${updated.created_date} for file: ${filename}`);
    } else {
      if (updated.created_date instanceof Date) {
        updated.created_date = DateUtils.formatDate(updated.created_date);
        console.log(`[TaskSystem] Converted Date object to string: ${updated.created_date} for file: ${filename}`);
      } else {
        console.log(`[TaskSystem] Preserving existing created_date: ${updated.created_date} for file: ${filename}`);
      }
    }
    if (!updated.status || updated.status === "") {
      updated.status = settings.defaultStatus || ((_a = settings.statusConfigs[0]) == null ? void 0 : _a.value) || "todo";
    }
    if (updated.ai_task === void 0 || updated.ai_task === null) {
      updated.ai_task = false;
    }
    this.applyCustomFieldDefaults(updated, settings.customSchemaFields, settings);
    settings.customSchemaFields.forEach((field) => {
      if (field.type === "date" && updated[field.key] && updated[field.key] instanceof Date) {
        updated[field.key] = DateUtils.formatDate(updated[field.key]);
        console.log(`[TaskSystem] Normalized ${field.key} from Date object to string: ${updated[field.key]} for file: ${filename}`);
      }
    });
    return updated;
  }
  /**
   * Apply default values from custom schema fields
   */
  static applyCustomFieldDefaults(frontmatter, customFields, settings) {
    if (!settings.autoPopulateDefaults) {
      return;
    }
    customFields.forEach((field) => {
      if (field.defaultValue !== void 0 && (!frontmatter.hasOwnProperty(field.key) || frontmatter[field.key] === null || frontmatter[field.key] === void 0 || frontmatter[field.key] === "")) {
        frontmatter[field.key] = field.defaultValue;
      }
    });
  }
  static extractTitleFromFilename(filename) {
    return filename.replace(/\.md$/, "").replace(/-/g, " ").replace(/_/g, " ").trim();
  }
  static shouldSetDefaultPriority(settings) {
    return settings.autoPopulateDefaults;
  }
  static hasRequiredFields(frontmatter, customFields = []) {
    const requiredFields = this.getRequiredFieldNames(customFields);
    return requiredFields.every(
      (field) => frontmatter.hasOwnProperty(field) && frontmatter[field] !== null && frontmatter[field] !== void 0 && frontmatter[field] !== ""
    );
  }
  static getMissingRequiredFields(frontmatter, customFields = []) {
    const requiredFields = this.getRequiredFieldNames(customFields);
    return requiredFields.filter(
      (field) => !frontmatter.hasOwnProperty(field) || frontmatter[field] === null || frontmatter[field] === void 0 || frontmatter[field] === ""
    );
  }
  static getRequiredFieldNames(customFields) {
    const coreRequired = ["atomic-task", "title", "created_date", "status", "ai_task"];
    const customRequired = customFields.filter((f) => f.required).map((f) => f.key);
    return [...coreRequired, ...customRequired];
  }
};

// src/ui/notification.manager.ts
var import_obsidian3 = require("obsidian");
var NotificationManager = class {
  static showValidationWarnings(filename, result) {
    if (result.errors.length > 0) {
      const errorCount = result.errors.length;
      new import_obsidian3.Notice(
        `Schema validation failed for "${filename}" - ${errorCount} error${errorCount > 1 ? "s" : ""}`,
        8e3
      );
      result.errors.slice(0, 3).forEach((error, index) => {
        setTimeout(() => {
          new import_obsidian3.Notice(`Error: ${error.field} - ${error.message}`, 6e3);
        }, index * 1e3);
      });
    }
    if (result.warnings.length > 0) {
      const warningCount = result.warnings.length;
      new import_obsidian3.Notice(
        `Schema warnings for "${filename}" - ${warningCount} warning${warningCount > 1 ? "s" : ""}`,
        5e3
      );
      if (result.warnings[0]) {
        setTimeout(() => {
          new import_obsidian3.Notice(`Warning: ${result.warnings[0].field} - ${result.warnings[0].message}`, 4e3);
        }, 500);
      }
    }
  }
  static showSuccessMessage(filename) {
    new import_obsidian3.Notice(`Schema validation passed for "${filename}"`, 2e3);
  }
  static showAutoPopulateMessage(filename, fieldsUpdated) {
    if (fieldsUpdated.length > 0) {
      const fieldList = fieldsUpdated.join(", ");
      new import_obsidian3.Notice(
        `Auto-populated fields for "${filename}": ${fieldList}`,
        4e3
      );
    }
  }
  static showErrorMessage(message, duration = 5e3) {
    new import_obsidian3.Notice(`Error: ${message}`, duration);
  }
  static showInfoMessage(message, duration = 3e3) {
    new import_obsidian3.Notice(message, duration);
  }
  static formatValidationErrors(result) {
    const messages = [];
    if (result.errors.length > 0) {
      messages.push(`Errors (${result.errors.length}):`);
      result.errors.forEach((error) => {
        messages.push(`  \u2022 ${error.field}: ${error.message}`);
      });
    }
    if (result.warnings.length > 0) {
      messages.push(`Warnings (${result.warnings.length}):`);
      result.warnings.forEach((warning) => {
        messages.push(`  \u2022 ${warning.field}: ${warning.message}`);
      });
    }
    return messages;
  }
  static createDetailedNotice(title, details, duration = 8e3) {
    new import_obsidian3.Notice(title, duration);
    details.slice(0, 3).forEach((detail, index) => {
      setTimeout(() => {
        new import_obsidian3.Notice(detail, Math.max(3e3, duration - 2e3));
      }, (index + 1) * 800);
    });
  }
};

// src/utils/debounce.ts
var DebounceManager = class {
  static debounce(key, callback, delay) {
    const existingTimer = this.timers.get(key);
    if (existingTimer) {
      clearTimeout(existingTimer);
    }
    const timer = setTimeout(() => {
      callback();
      this.timers.delete(key);
    }, delay);
    this.timers.set(key, timer);
  }
  static debounceAsync(key, callback, delay) {
    const existingTimer = this.timers.get(key);
    if (existingTimer) {
      clearTimeout(existingTimer);
    }
    const timer = setTimeout(async () => {
      try {
        await callback();
      } catch (error) {
        console.error(`Debounced async operation failed for key ${key}:`, error);
      } finally {
        this.timers.delete(key);
      }
    }, delay);
    this.timers.set(key, timer);
  }
  static cancel(key) {
    const timer = this.timers.get(key);
    if (timer) {
      clearTimeout(timer);
      this.timers.delete(key);
    }
  }
  static cancelAll() {
    this.timers.forEach((timer) => clearTimeout(timer));
    this.timers.clear();
  }
  static isActive(key) {
    return this.timers.has(key);
  }
};
DebounceManager.timers = /* @__PURE__ */ new Map();

// src/utils/logger.ts
var Logger = class {
  static isDebugMode() {
    return true;
  }
  static debug(message, data) {
    if (this.isDebugMode()) {
      console.log(`[TaskSystem] DEBUG: ${message}`, data);
    }
  }
  static info(message, data) {
    console.log(`[TaskSystem] INFO: ${message}`, data);
  }
  static error(message, error) {
    console.error(`[TaskSystem] ERROR: ${message}`, error);
  }
  static warn(message, data) {
    console.warn(`[TaskSystem] WARN: ${message}`, data);
  }
};

// src/events/file.events.ts
var FileEventHandler = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.frontmatterReader = new FrontmatterReader(plugin.app);
    this.frontmatterWriter = new FrontmatterWriter(plugin.app);
  }
  registerEventHandlers() {
    this.plugin.registerEvent(
      this.plugin.app.vault.on("create", this.onFileCreated.bind(this))
    );
    this.plugin.registerEvent(
      this.plugin.app.vault.on("modify", this.onFileModified.bind(this))
    );
    Logger.debug("File event handlers registered");
  }
  async onFileCreated(file) {
    if (!this.isMarkdownFile(file))
      return;
    if (this.isInClaudeFolder(file))
      return;
    Logger.debug(`File created: ${file.name}`);
    DebounceManager.debounceAsync(
      `validate-${file.path}`,
      () => this.processFile(file, "created"),
      this.plugin.settings.validationDelay
    );
  }
  async onFileModified(file) {
    if (!this.isMarkdownFile(file))
      return;
    if (this.isInClaudeFolder(file))
      return;
    Logger.debug(`File modified: ${file.name}`);
    DebounceManager.debounceAsync(
      `validate-${file.path}`,
      () => this.processFile(file, "modified"),
      this.plugin.settings.validationDelay
    );
  }
  async processFile(file, eventType) {
    try {
      const frontmatter = await this.frontmatterReader.readFrontmatter(file);
      if (!frontmatter || !this.frontmatterReader.isAtomicNote(frontmatter)) {
        Logger.debug(`Skipping non-atomic note: ${file.name}`);
        return;
      }
      Logger.debug(`Processing atomic note: ${file.name}`);
      await this.validateAndPopulate(file, frontmatter);
    } catch (error) {
      Logger.error(`Failed to process file ${file.name}:`, error);
      NotificationManager.showErrorMessage(`Failed to process "${file.name}": ${error.message}`);
    }
  }
  async validateAndPopulate(file, frontmatter) {
    let wasUpdated = false;
    if (this.plugin.settings.autoPopulateDefaults) {
      const updatedFrontmatter = DefaultValueAssigner.assignDefaults(
        frontmatter,
        file.name,
        this.plugin.settings
      );
      const fieldsUpdated = this.getUpdatedFields(frontmatter, updatedFrontmatter);
      if (fieldsUpdated.length > 0) {
        Logger.debug(`Auto-populating fields for ${file.name}: ${fieldsUpdated.join(", ")}`);
        try {
          await this.frontmatterWriter.writeFrontmatter(file, updatedFrontmatter);
          wasUpdated = true;
          NotificationManager.showAutoPopulateMessage(file.name, fieldsUpdated);
          frontmatter = updatedFrontmatter;
        } catch (error) {
          Logger.error(`Failed to write frontmatter for ${file.name}:`, error);
          NotificationManager.showErrorMessage(`Failed to update "${file.name}": ${error.message}`);
          return;
        }
      }
    }
    if (!wasUpdated && this.plugin.settings.enableValidation) {
      const validationResult = SchemaValidator.validate(frontmatter, this.plugin.settings.statusConfigs, this.plugin.settings.customSchemaFields);
      if (!validationResult.isValid || validationResult.warnings.length > 0) {
        Logger.debug(`Validation issues found for ${file.name}:`, validationResult);
        NotificationManager.showValidationWarnings(file.name, validationResult);
      } else if (this.plugin.settings.showSuccessNotifications) {
        NotificationManager.showSuccessMessage(file.name);
      }
    }
  }
  getUpdatedFields(original, updated) {
    const fieldsUpdated = [];
    for (const [key, value] of Object.entries(updated)) {
      if (JSON.stringify(original[key]) !== JSON.stringify(value)) {
        fieldsUpdated.push(key);
      }
    }
    return fieldsUpdated;
  }
  isMarkdownFile(file) {
    return file.extension === "md";
  }
  isInClaudeFolder(file) {
    return file.path.includes("/.claude/");
  }
  async validateCurrentFile() {
    const activeFile = this.plugin.app.workspace.getActiveFile();
    if (!activeFile || !this.isMarkdownFile(activeFile)) {
      NotificationManager.showErrorMessage("No active markdown file to validate");
      return false;
    }
    if (this.isInClaudeFolder(activeFile)) {
      NotificationManager.showInfoMessage("Files in .claude folders are ignored by the task system");
      return false;
    }
    try {
      const frontmatter = await this.frontmatterReader.readFrontmatter(activeFile);
      if (!frontmatter || !this.frontmatterReader.isAtomicNote(frontmatter)) {
        NotificationManager.showInfoMessage(`"${activeFile.name}" is not an atomic task note`);
        return false;
      }
      const validationResult = SchemaValidator.validate(frontmatter, this.plugin.settings.statusConfigs, this.plugin.settings.customSchemaFields);
      if (validationResult.isValid && validationResult.warnings.length === 0) {
        NotificationManager.showSuccessMessage(activeFile.name);
        return true;
      } else {
        NotificationManager.showValidationWarnings(activeFile.name, validationResult);
        return false;
      }
    } catch (error) {
      Logger.error(`Failed to validate current file:`, error);
      NotificationManager.showErrorMessage(`Validation failed: ${error.message}`);
      return false;
    }
  }
  async convertCurrentFileToAtomicTask() {
    const activeFile = this.plugin.app.workspace.getActiveFile();
    if (!activeFile || !this.isMarkdownFile(activeFile)) {
      NotificationManager.showErrorMessage("No active markdown file to convert");
      return false;
    }
    if (this.isInClaudeFolder(activeFile)) {
      NotificationManager.showInfoMessage("Files in .claude folders are ignored by the task system");
      return false;
    }
    try {
      const frontmatter = await this.frontmatterReader.readFrontmatter(activeFile) || {};
      frontmatter["atomic-task"] = true;
      const updatedFrontmatter = DefaultValueAssigner.assignDefaults(
        frontmatter,
        activeFile.name,
        this.plugin.settings
      );
      await this.frontmatterWriter.writeFrontmatter(activeFile, updatedFrontmatter);
      const fieldsAdded = this.getUpdatedFields(frontmatter, updatedFrontmatter);
      NotificationManager.showInfoMessage(
        `Converted "${activeFile.name}" to atomic task. Added: ${fieldsAdded.join(", ")}`
      );
      return true;
    } catch (error) {
      Logger.error(`Failed to convert file to atomic task:`, error);
      NotificationManager.showErrorMessage(`Conversion failed: ${error.message}`);
      return false;
    }
  }
};

// src/commands/validation.commands.ts
var import_obsidian4 = require("obsidian");
var ValidationCommands = class {
  static registerCommands(plugin) {
    plugin.addCommand({
      id: "validate-current-file",
      name: "Validate current file schema",
      checkCallback: (checking) => {
        const activeFile = plugin.app.workspace.getActiveFile();
        if (activeFile && activeFile.extension === "md") {
          if (!checking) {
            plugin.fileEventHandler.validateCurrentFile();
          }
          return true;
        }
        return false;
      }
    });
    plugin.addCommand({
      id: "convert-to-atomic-task",
      name: "Convert current file to atomic task",
      checkCallback: (checking) => {
        const activeFile = plugin.app.workspace.getActiveFile();
        if (activeFile && activeFile.extension === "md") {
          if (!checking) {
            plugin.fileEventHandler.convertCurrentFileToAtomicTask();
          }
          return true;
        }
        return false;
      }
    });
    plugin.addCommand({
      id: "toggle-validation",
      name: "Toggle schema validation on/off",
      callback: async () => {
        plugin.settings.enableValidation = !plugin.settings.enableValidation;
        await plugin.saveSettings();
        const status = plugin.settings.enableValidation ? "enabled" : "disabled";
        new import_obsidian4.Notice(`Schema validation ${status}`);
      }
    });
    plugin.addCommand({
      id: "toggle-auto-populate",
      name: "Toggle auto-populate defaults on/off",
      callback: async () => {
        plugin.settings.autoPopulateDefaults = !plugin.settings.autoPopulateDefaults;
        await plugin.saveSettings();
        const status = plugin.settings.autoPopulateDefaults ? "enabled" : "disabled";
        new import_obsidian4.Notice(`Auto-populate defaults ${status}`);
      }
    });
  }
};

// src/main.ts
var TaskSystemPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    Logger.info("Loading Atomic Task Schema Enforcer plugin");
    await this.loadSettings();
    this.fileEventHandler = new FileEventHandler(this);
    this.fileEventHandler.registerEventHandlers();
    ValidationCommands.registerCommands(this);
    this.addSettingTab(new TaskSystemSettingTab(this.app, this));
    const ribbonIconEl = this.addRibbonIcon("list-checks", "Atomic Task Schema Enforcer", () => {
      this.fileEventHandler.validateCurrentFile();
    });
    ribbonIconEl.addClass("task-system-ribbon");
    Logger.info("Atomic Task Schema Enforcer plugin loaded successfully");
  }
  async onunload() {
    Logger.info("Unloading Atomic Task Schema Enforcer plugin");
    DebounceManager.cancelAll();
    Logger.info("Atomic Task Schema Enforcer plugin unloaded");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    await this.migrateSettings();
    Logger.debug("Settings loaded:", this.settings);
  }
  /**
   * Migrate settings to ensure compatibility with dynamic schema system
   */
  async migrateSettings() {
    let migrationNeeded = false;
    if (!Array.isArray(this.settings.customSchemaFields) || this.settings.customSchemaFields.length === 0) {
      this.settings.customSchemaFields = [...DEFAULT_CUSTOM_SCHEMA_FIELDS];
      migrationNeeded = true;
      Logger.info("Migrated settings: Added default custom schema fields");
    }
    const defaultFieldKeys = DEFAULT_CUSTOM_SCHEMA_FIELDS.map((f) => f.key);
    const existingFieldKeys = this.settings.customSchemaFields.map((f) => f.key);
    for (const defaultField of DEFAULT_CUSTOM_SCHEMA_FIELDS) {
      if (!existingFieldKeys.includes(defaultField.key)) {
        this.settings.customSchemaFields.push({ ...defaultField });
        migrationNeeded = true;
        Logger.info(`Migrated settings: Added missing default field "${defaultField.key}"`);
      }
    }
    if (migrationNeeded) {
      await this.saveSettings();
    }
  }
  async saveSettings() {
    await this.saveData(this.settings);
    Logger.debug("Settings saved:", this.settings);
  }
  // Handle external settings changes (called by Obsidian when settings change externally)
  async onExternalSettingsChange() {
    await this.loadSettings();
    Logger.debug("External settings change detected, reloaded settings");
  }
};
/*! Bundled license information:

js-yaml/dist/js-yaml.mjs:
  (*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT *)
*/
//# sourceMappingURL=data:application/json;base64,
