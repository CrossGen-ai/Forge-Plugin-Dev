import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { copyFileSync, watchFile } from "fs";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Copy files to appropriate location
const copyFile = (filename) => {
	const target = prod ? `build/${filename}` : `../../.obsidian/plugins/sample-plugin/${filename}`;
	try {
		copyFileSync(filename, target);
		console.log(`✓ Copied ${filename} to ${target}`);
	} catch (err) {
		console.log(`ℹ ${filename} not found or could not copy`);
	}
};

const copyAllAssets = () => {
	copyFile("styles.css");
	copyFile("manifest.json");
	copyFile("versions.json");
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: prod ? "build/main.js" : "../../.obsidian/plugins/sample-plugin/main.js",
	minify: prod,
	plugins: [
		{
			name: 'asset-watcher',
			setup(build) {
				if (!prod) {
					build.onEnd(() => {
						copyAllAssets();
					});
				}
			},
		},
	],
});

if (prod) {
	await context.rebuild();
	copyAllAssets();
	process.exit(0);
} else {
	copyAllAssets(); // Initial copy of all assets

	// Watch asset files for changes
	const watchedFiles = ['styles.css', 'manifest.json', 'versions.json'];

	watchedFiles.forEach(filename => {
		watchFile(filename, () => {
			console.log(`${filename} changed, copying...`);
			copyFile(filename);
		});
	});

	await context.watch();
}
